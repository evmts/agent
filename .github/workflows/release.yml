name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-beta.*'
      - 'v*.*.*-alpha.*'

env:
  MACOS_VERSION: "14"

jobs:
  # ============================================================================
  # VALIDATE RELEASE
  # ============================================================================

  validate-release:
    name: Validate Release
    runs-on: macos-${{ env.MACOS_VERSION }}
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Parse version information
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        if [[ $VERSION == *"alpha"* ]] || [[ $VERSION == *"beta"* ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "📋 Release Information:"
        echo "Version: $VERSION"
        echo "Is Prerelease: $(if [[ $VERSION == *"alpha"* ]] || [[ $VERSION == *"beta"* ]]; then echo "true"; else echo "false"; fi)"

    - name: Validate version format
      run: |
        VERSION=${{ steps.version.outputs.version }}
        
        # Remove 'v' prefix if present
        CLEAN_VERSION=${VERSION#v}
        
        # Validate semantic versioning format
        if [[ ! $CLEAN_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.2.3, v1.2.3-beta.1, v1.2.3-alpha.1"
          exit 1
        fi
        
        echo "✅ Version format is valid"

  # ============================================================================
  # BUILD RELEASE CANDIDATES
  # ============================================================================

  build-release:
    name: Build Release Assets
    runs-on: macos-${{ env.MACOS_VERSION }}
    needs: [validate-release]
    strategy:
      matrix:
        target: [macos-x64, macos-arm64]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v17
      
    - name: Setup Nix Cache
      uses: DeterminateSystems/magic-nix-cache-action@v10

    - name: Build release binary (${{ matrix.target }})
      run: |
        nix develop --command bash -c "
          echo '🏗️  Building Plue ${{ needs.validate-release.outputs.version }} for ${{ matrix.target }}...'
          
          # Set target architecture
          case '${{ matrix.target }}' in
            'macos-x64')
              export TARGET_ARCH='x86_64-macos'
              ;;
            'macos-arm64')
              export TARGET_ARCH='aarch64-macos'
              ;;
          esac
          
          # Build with optimization for release
          zig build swift --summary all -Doptimize=ReleaseFast -Dtarget=\${TARGET_ARCH}
        "

    - name: Verify binary
      run: |
        echo '✅ Verifying binary...'
        BINARY=".build/release/plue"
        
        if [ ! -f "$BINARY" ]; then
          echo "❌ Binary not found"
          exit 1
        fi
        
        echo "Binary info:"
        file "$BINARY"
        ls -lh "$BINARY"
        
        # Test basic functionality
        timeout 5s "$BINARY" --help || echo "Help command test completed"

    - name: Create release package
      run: |
        echo '📦 Creating release package...'
        
        VERSION=${{ needs.validate-release.outputs.version }}
        TARGET=${{ matrix.target }}
        
        # Create package directory
        PACKAGE_DIR="plue-${VERSION}-${TARGET}"
        mkdir -p "$PACKAGE_DIR"
        
        # Copy files
        cp .build/release/plue "$PACKAGE_DIR/"
        cp scripts/plue "$PACKAGE_DIR/plue-cli"
        cp scripts/install.sh "$PACKAGE_DIR/"
        cp README.md "$PACKAGE_DIR/" 2>/dev/null || echo "README.md not found, skipping"
        cp LICENSE* "$PACKAGE_DIR/" 2>/dev/null || echo "LICENSE not found, skipping"
        
        # Create install script specific to this build
        cat > "$PACKAGE_DIR/install.sh" << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Installing Plue CLI..."
        
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        
        # Create /usr/local/bin if it doesn't exist
        if [ ! -d "/usr/local/bin" ]; then
            echo "📁 Creating /usr/local/bin directory..."
            sudo mkdir -p /usr/local/bin
        fi
        
        # Install binary
        echo "📋 Installing plue binary..."
        sudo cp "$SCRIPT_DIR/plue" /usr/local/bin/plue
        sudo chmod +x /usr/local/bin/plue
        
        # Install CLI wrapper
        echo "📋 Installing plue CLI wrapper..."
        sudo cp "$SCRIPT_DIR/plue-cli" /usr/local/bin/plue-cli
        sudo chmod +x /usr/local/bin/plue-cli
        
        echo "✅ Plue installed successfully!"
        echo ""
        echo "Usage:"
        echo "  plue                    # Open Plue in current directory"
        echo "  plue /path/to/project   # Open Plue in specific directory"
        EOF
        
        chmod +x "$PACKAGE_DIR/install.sh"
        
        # Create tarball
        tar -czf "${PACKAGE_DIR}.tar.gz" "$PACKAGE_DIR"
        
        # Generate checksums
        shasum -a 256 "${PACKAGE_DIR}.tar.gz" > "${PACKAGE_DIR}.tar.gz.sha256"
        
        echo "Package created: ${PACKAGE_DIR}.tar.gz"
        ls -la "${PACKAGE_DIR}.tar.gz"*

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.target }}
        path: |
          plue-${{ needs.validate-release.outputs.version }}-${{ matrix.target }}.tar.gz
          plue-${{ needs.validate-release.outputs.version }}-${{ matrix.target }}.tar.gz.sha256
        retention-days: 30

  # ============================================================================
  # CREATE UNIVERSAL BINARY (OPTIONAL)
  # ============================================================================

  create-universal:
    name: Create Universal Binary
    runs-on: macos-${{ env.MACOS_VERSION }}
    needs: [build-release, validate-release]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: release-*
        merge-multiple: true

    - name: Create universal binary
      run: |
        echo '🔄 Creating universal binary...'
        
        VERSION=${{ needs.validate-release.outputs.version }}
        
        # Extract both architectures
        tar -xzf "plue-${VERSION}-macos-x64.tar.gz"
        tar -xzf "plue-${VERSION}-macos-arm64.tar.gz"
        
        # Create universal binary using lipo
        mkdir -p "plue-${VERSION}-macos-universal"
        
        # Combine binaries
        lipo -create \
          "plue-${VERSION}-macos-x64/plue" \
          "plue-${VERSION}-macos-arm64/plue" \
          -output "plue-${VERSION}-macos-universal/plue"
        
        # Copy other files from x64 version
        cp "plue-${VERSION}-macos-x64/plue-cli" "plue-${VERSION}-macos-universal/"
        cp "plue-${VERSION}-macos-x64/install.sh" "plue-${VERSION}-macos-universal/"
        cp "plue-${VERSION}-macos-x64/README.md" "plue-${VERSION}-macos-universal/" 2>/dev/null || true
        cp "plue-${VERSION}-macos-x64/LICENSE"* "plue-${VERSION}-macos-universal/" 2>/dev/null || true
        
        # Verify universal binary
        echo "Universal binary info:"
        file "plue-${VERSION}-macos-universal/plue"
        lipo -info "plue-${VERSION}-macos-universal/plue"
        
        # Create tarball
        tar -czf "plue-${VERSION}-macos-universal.tar.gz" "plue-${VERSION}-macos-universal"
        shasum -a 256 "plue-${VERSION}-macos-universal.tar.gz" > "plue-${VERSION}-macos-universal.tar.gz.sha256"

    - name: Upload universal binary
      uses: actions/upload-artifact@v4
      with:
        name: release-universal
        path: |
          plue-${{ needs.validate-release.outputs.version }}-macos-universal.tar.gz
          plue-${{ needs.validate-release.outputs.version }}-macos-universal.tar.gz.sha256

  # ============================================================================
  # RELEASE TESTING
  # ============================================================================

  test-release:
    name: Test Release Assets
    runs-on: macos-${{ env.MACOS_VERSION }}
    needs: [create-universal, validate-release]
    steps:
    - name: Download universal release
      uses: actions/download-artifact@v4
      with:
        name: release-universal

    - name: Test installation
      run: |
        echo '🧪 Testing release installation...'
        
        VERSION=${{ needs.validate-release.outputs.version }}
        
        # Verify checksums
        shasum -c "plue-${VERSION}-macos-universal.tar.gz.sha256"
        
        # Extract and test
        tar -xzf "plue-${VERSION}-macos-universal.tar.gz"
        cd "plue-${VERSION}-macos-universal"
        
        # Test binary
        ./plue --help
        
        # Test CLI wrapper
        ./plue-cli --help || echo "CLI wrapper test completed"
        
        echo "✅ Release testing completed successfully"

  # ============================================================================
  # PUBLISH RELEASE
  # ============================================================================

  publish-release:
    name: Publish Release
    runs-on: macos-${{ env.MACOS_VERSION }}
    needs: [test-release, validate-release]
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: release-*
        merge-multiple: true

    - name: Generate release notes
      run: |
        echo '📝 Generating release notes...'
        
        VERSION=${{ needs.validate-release.outputs.version }}
        IS_PRERELEASE=${{ needs.validate-release.outputs.is-prerelease }}
        
        # Get the previous tag for changelog
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Create release notes
        cat > release-notes.md << EOF
        # Plue $VERSION
        
        ## What's New
        
        This release includes the latest improvements to the Plue multi-agent coding assistant.
        
        EOF
        
        # Add changelog if we have a previous tag
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" >> release-notes.md
          echo "" >> release-notes.md
          git log --oneline "$PREVIOUS_TAG..HEAD" | sed 's/^/- /' >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        cat >> release-notes.md << EOF
        ## Installation
        
        ### Quick Install (Recommended)
        \`\`\`bash
        curl -fsSL https://github.com/williamcory/plue/releases/download/$VERSION/install.sh | bash
        \`\`\`
        
        ### Manual Install
        1. Download \`plue-$VERSION-macos-universal.tar.gz\`
        2. Extract: \`tar -xzf plue-$VERSION-macos-universal.tar.gz\`
        3. Run: \`cd plue-$VERSION-macos-universal && ./install.sh\`
        
        ### Architecture-Specific Downloads
        - **Universal Binary** (Recommended): \`plue-$VERSION-macos-universal.tar.gz\`
        - **Intel Macs**: \`plue-$VERSION-macos-x64.tar.gz\`
        - **Apple Silicon**: \`plue-$VERSION-macos-arm64.tar.gz\`
        
        ## Requirements
        - macOS 13.0 or later
        
        ## Verification
        
        Verify downloads with checksums:
        \`\`\`bash
        shasum -a 256 -c plue-$VERSION-*.tar.gz.sha256
        \`\`\`
        
        ## Usage
        
        After installation, use Plue like the VSCode CLI:
        \`\`\`bash
        plue                    # Open current directory
        plue /path/to/project   # Open specific directory
        plue .                  # Open current directory explicitly
        \`\`\`
        
        ## Full Changelog
        
        **Full Changelog**: https://github.com/williamcory/plue/compare/$PREVIOUS_TAG...$VERSION
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          plue-${{ needs.validate-release.outputs.version }}-*.tar.gz
          plue-${{ needs.validate-release.outputs.version }}-*.sha256
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
        generate_release_notes: true
        make_latest: ${{ needs.validate-release.outputs.is-prerelease == 'false' }}

  # ============================================================================
  # POST-RELEASE ACTIONS
  # ============================================================================

  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-latest
    needs: [publish-release, validate-release]
    steps:
    - name: Create release announcement issue
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ needs.validate-release.outputs.version }}';
          const isPrerelease = '${{ needs.validate-release.outputs.is-prerelease }}' === 'true';
          
          const title = `🎉 Release ${version} is now available!`;
          const body = `
          # Release ${version} Published
          
          ${isPrerelease ? '⚠️ This is a pre-release version.' : '🎉 This is a stable release.'}
          
          ## Download
          
          Download the latest release from:
          https://github.com/williamcory/plue/releases/tag/${version}
          
          ## Quick Install
          
          \`\`\`bash
          curl -fsSL https://github.com/williamcory/plue/releases/download/${version}/install.sh | bash
          \`\`\`
          
          ## What's Next
          
          - [ ] Update documentation if needed
          - [ ] Announce on social media/blog
          - [ ] Monitor for issues
          - [ ] Plan next release
          
          This issue will be automatically closed in 7 days.
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['release', 'announcement']
          });

    - name: Trigger documentation update
      run: |
        echo '📚 Release ${{ needs.validate-release.outputs.version }} completed'
        echo 'Consider updating:'
        echo '- README.md with new version'
        echo '- Documentation with new features'
        echo '- Website/blog with announcement'